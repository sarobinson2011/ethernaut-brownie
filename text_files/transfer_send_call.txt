""" 
                *** Solidity - transfer vs send vs call functions ***


1.  transfer:   the receiving smart contract should have a fallback function defined
                or else the transfer call will throw an error. There is a gas limit
                of 2300 gas, which is enough to complete the transfer operation.  It is
                hardcoded to prevent reentrancy attacks.

2.  send:       it works in a similar way to a transfer call, and has a gas limit of 
                2300 gass as well.  It returns the status as a boolean.

3.  call:       is the recommended way of sending ETH to a smart contract. The empty
                argument triggers the fallback function of the receiving address.

                    (bool sent, memory data) = _to.call{value: msg.value}{""};

                -> here call has NO gas limit, since none is specified.  

                using call, one can also trigger other functions defined in the contract
                and send a fixed amount of gas to execute the function.  The transaction
                status is sent as a boolean and the return value is sent in the data 
                variable.

                    (bool sent, bytes memory data) = _to.call{gas: 10000,
                    value = msg.value}{"abi_func_signature(uint256 args)"};

                -> here call is made, specifying an integer limit of 10000. Limiting
                   the amount of gas that the transaction has available for consumption.


        
